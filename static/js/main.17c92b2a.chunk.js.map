{"version":3,"sources":["logo.svg","IngredientList.js","BowlStatsPanel.js","App.js","reportWebVitals.js","index.js"],"names":["IngredientList","props","ingredientItems","ingredients","map","ingredient","Ingredient","id","className","name","description","AmountSelector","ingredientId","dispatch","React","BowlDispatch","AmountSlider","onChange","value","type","amount","bowl_stats","BowlStatus","idx","ingredients_ordered","findIndex","e","target","min","max","step","BowlStatsPanel","bowlStats","bowlStatsRender","elem","i","INGREDIENTS","bowlMacros","reduce","acc","newMacros","Object","keys","forEach","macro","index","macros","bowlMacrosRender","toFixed","bowl_total","state","price","getBowlTotal","initialState","updateState","action","newIngredients","indexToMutate","ele","Error","App","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMAAe,I,YCIR,SAASA,EAAeC,GAC3B,IACMC,EADcD,EAAME,YACUC,KAAI,SAACC,GAAD,OACpC,cAACC,EAAD,CAAYD,WAAYA,GAAiBA,EAAWE,OAExD,OACI,qBAAKC,UAAU,iBAAf,SACKN,IAKb,SAASI,EAAWL,GAChB,OACI,sBAAKO,UAAU,aAAf,UACI,kCAAKP,EAAMI,WAAWE,GAAtB,IAA2BN,EAAMI,WAAWI,KAA5C,OACCR,EAAMI,WAAWK,YAClB,cAACC,EAAD,CAAgBC,aAAcX,EAAMI,WAAWE,QAK3D,SAASI,EAAeV,GACpB,IAAMY,EAAWC,aAAiBC,GAQlC,OACI,qBAAKP,UAAU,iBAAf,SACI,cAACQ,EAAD,CACIC,SAVZ,SAAsBC,GAClBL,EAAS,CACLM,KAAM,eACNZ,GAAIN,EAAMW,aACVQ,OAAQF,KAOJN,aAAcX,EAAMW,iBAMpC,SAASI,EAAaf,GAClB,IAAMoB,EAAaP,aAAiBQ,GAC9BC,EAAMF,EAAWG,oBAAoBC,WACvC,SAACC,GAAD,OAAOA,EAAEnB,KAAON,EAAMW,gBAE1B,OACI,uBAAOK,SAAU,SAACS,GAAD,OAAOzB,EAAMgB,SAASS,EAAEC,OAAOT,QAC5CC,KAAK,QAAQS,IAAI,IAAIC,IAAI,MAAMC,KAAK,KACpCZ,MAAOG,EAAWG,oBAAoBD,GAAKH,SCvBhD,SAASW,IACd,IAAMC,EAAYlB,aAAiBQ,GAC7BW,EAAkBD,EAAUR,oBAAoBpB,KAAI,SAAC8B,GACzD,IAAMC,EAAIC,EAAYX,WAAU,SAACC,GAAD,OAAOA,EAAEnB,KAAO2B,EAAK3B,MACrD,OACE,gCACG6B,EAAYD,GAAG1B,KADlB,KAC0ByB,EAAKd,OAD/B,MAAUc,EAAK3B,OAIb8B,EAA2BL,EApBpBR,oBAAoBc,QAAO,SAACC,EAAKL,GAC5C,IAAMX,EAAMa,EAAYX,WAAU,SAACC,GAAD,OAAOA,EAAEnB,KAAO2B,EAAK3B,MACjDiC,EAAYD,EAIlB,OAHAE,OAAOC,KAAKF,GAAWG,SAAQ,SAACC,EAAOC,GACrCL,EAAUI,IAAUR,EAAYb,GAAKuB,OAAOF,GAASV,EAAKd,UAErDoB,IAXa,CACpB,SAAY,EACZ,QAAW,EACX,IAAO,IAuBHO,EAAmBN,OAAOC,KAAKL,GAAYjC,KAAI,SAACwC,GACpD,OACE,gCACGA,EADH,MACaP,EAAWO,GAAOI,QAAQ,KAD7BJ,MAKRK,EA3CR,SAAsBC,GAEpB,OAAOA,EAAM1B,oBAAoBc,QAAO,SAACC,EAAKL,GAC5C,IAAMX,EAAMa,EAAYX,WAAU,SAACC,GAAD,OAAOA,EAAEnB,KAAO2B,EAAK3B,MACvD,OAAOgC,EAAMH,EAAYb,GAAK4B,MAAQjB,EAAKd,SAC1C,GAsCgBgC,CAAapB,GAChC,OACE,sBAAKxB,UAAU,YAAf,UACE,4BAAG,6CACFyB,EACD,4BAAG,4CACFc,EACD,yCALF,KAKoBE,EAAWD,QAAQ,MC/CpC,IAAMZ,EAAc,CACzB,CACE7B,GAAI,EACJE,KAAM,sBACNU,KAAM,OACNT,YAAa,2CACboC,OAAQ,CACN,SAAY,KACZ,QAAW,KACX,IAAO,MAETK,MAAO,KAET,CACE5C,GAAI,EACJE,KAAM,qBACNU,KAAM,OACNT,YAAa,wEACboC,OAAQ,CACN,SAAY,KACZ,QAAW,IACX,IAAO,MAETK,MAAO,MAET,CACE5C,GAAI,GACJE,KAAM,2BACNU,KAAM,UACNT,YAAa,wEACboC,OAAQ,CACN,SAAY,KACZ,QAAW,IACX,IAAO,KAETK,MAAO,OAILE,EAAe,CACnB7B,oBAAqB,CACnB,CACEjB,GAAI,EACJa,OAAQ,GAEV,CACEb,GAAI,EACJa,OAAQ,GAEV,CACEb,GAAI,GACJa,OAAQ,KAKDL,EAAeD,gBAAoB,MACnCQ,EAAaR,gBAAoBuC,GAE9C,SAASC,EAAYJ,EAAOK,GAE1B,OAAQA,EAAOpC,MACb,IAAK,eACH,IAAMqC,EAAiBN,EAAM1B,oBAGvBiC,EAAgBD,EAAe/B,WAAU,SAACiC,GAAD,OAASA,EAAInD,KAAOgD,EAAOhD,MAI1E,OADAiD,EAAeC,GAAerC,OAASmC,EAAOnC,OACvC,CAAEI,oBAAqBgC,GAChC,QACE,MAAM,IAAIG,OAqBDC,MAjBf,WAA4B,IAAD,EACC9C,aAAiBwC,EAAaD,GAD/B,mBAClBH,EADkB,KACXrC,EADW,KAEzB,OACE,sBAAKL,UAAU,MAAf,UACE,mDACA,4BAAG,uEACH,yFACA,eAACO,EAAa8C,SAAd,CAAuB3C,MAAOL,EAA9B,UACE,cAACb,EAAD,CAAgBG,YAAaiC,IAC7B,cAACd,EAAWuC,SAAZ,CAAqB3C,MAAOgC,EAA5B,SACE,cAACnB,EAAD,aCjFK+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.17c92b2a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","// @flow\nimport * as React from 'react';\nimport { BowlDispatch, BowlStatus } from './App.js';\n\nexport function IngredientList(props: Object): React.Node {\n    const ingredients = props.ingredients\n    const ingredientItems = ingredients.map((ingredient) =>\n        <Ingredient ingredient={ingredient} key={ingredient.id} />\n    )\n    return (\n        <div className=\"IngredientList\">\n            {ingredientItems}\n        </div>\n    )\n}\n\nfunction Ingredient(props): React.Node {\n    return (\n        <div className=\"Ingredient\">\n            <b> {props.ingredient.id} {props.ingredient.name} </b>\n            {props.ingredient.description}\n            <AmountSelector ingredientId={props.ingredient.id} />\n        </div>\n    )\n}\n\nfunction AmountSelector(props): React.Node {\n    const dispatch = React.useContext(BowlDispatch)\n    function handleChange(value) {\n        dispatch({\n            type: \"changeAmount\",\n            id: props.ingredientId,\n            amount: value,\n        })\n    }\n    return (\n        <div className=\"AmountSelector\">\n            <AmountSlider\n                onChange={handleChange}\n                ingredientId={props.ingredientId}\n            />\n        </div>\n    )\n}\n\nfunction AmountSlider(props): React.Node {\n    const bowl_stats = React.useContext(BowlStatus)\n    const idx = bowl_stats.ingredients_ordered.findIndex(\n        (e) => e.id === props.ingredientId\n    )\n    return (\n        <input onChange={(e) => props.onChange(e.target.value)}\n            type=\"range\" min=\"0\" max=\"500\" step=\"10\"\n            value={bowl_stats.ingredients_ordered[idx].amount}\n        ></input>\n    )\n}","// @flow\nimport * as React from 'react';\nimport { INGREDIENTS, BowlDispatch, BowlStatus } from './App.js';\n\nfunction getBowlTotal(state): Number {\n  // Helper function to calculate the total cost of the bowl\n  return state.ingredients_ordered.reduce((acc, elem) => {\n    const idx = INGREDIENTS.findIndex((e) => e.id === elem.id)\n    return acc + INGREDIENTS[idx].price * elem.amount\n  }, 0)\n}\n\nfunction getBowlMacros(state) {\n  // Helper function to calculate the total macros of a bowl\n  const initialMacros = {\n    \"calories\": 0,\n    \"protein\": 0,\n    \"fat\": 0\n  }\n  return state.ingredients_ordered.reduce((acc, elem) => {\n    const idx = INGREDIENTS.findIndex((e) => e.id === elem.id)\n    const newMacros = acc\n    Object.keys(newMacros).forEach((macro, index) => {\n      newMacros[macro] += INGREDIENTS[idx].macros[macro] * elem.amount\n    })\n    return newMacros\n  }, initialMacros)\n}\n\n\nexport function BowlStatsPanel(): React.Node {\n  const bowlStats = React.useContext(BowlStatus)\n  const bowlStatsRender = bowlStats.ingredients_ordered.map((elem) => {\n    const i = INGREDIENTS.findIndex((e) => e.id === elem.id)\n    return (\n      <div key={elem.id}>\n        {INGREDIENTS[i].name}: {elem.amount}g\n      </div>)\n  })\n  const bowlMacros = getBowlMacros(bowlStats)\n  const bowlMacrosRender = Object.keys(bowlMacros).map((macro) => {\n    return (\n      <div key={macro}>\n        {macro} : {bowlMacros[macro].toFixed(2)}\n      </div>\n    )\n  })\n  const bowl_total = getBowlTotal(bowlStats)\n  return (\n    <div className=\"BowlStats\">\n      <p><b>Your Bowl:</b></p>\n      {bowlStatsRender}\n      <p><b> Macros: </b></p>\n      {bowlMacrosRender}\n      <b> Total: </b> ${bowl_total.toFixed(2)}\n    </div>\n  )\n}","// @flow\nimport logo from './logo.svg';\nimport './App.css';\nimport * as React from 'react';\nimport { IngredientList } from './IngredientList.js';\nimport { BowlStatsPanel } from './BowlStatsPanel.js';\n\nexport const INGREDIENTS = [\n  {\n    id: 1,\n    name: \"Chestnut Brown Rice\",\n    type: \"carb\",\n    description: \"Brown rice toasted to a nutty perfection\",\n    macros: {\n      \"calories\": 1.11,\n      \"protein\": 0.026,\n      \"fat\": 0.009\n    },\n    price: 0.02\n  },\n  {\n    id: 2,\n    name: \"Free Range Fusilli\",\n    type: \"carb\",\n    description: \"Whole-wheat fusilli that was allowed to roam free during its lifetime\",\n    macros: {\n      \"calories\": 1.58,\n      \"protein\": 0.06,\n      \"fat\": 0.009\n    },\n    price: 0.015\n  },\n  {\n    id: 11,\n    name: \"Sous-vide Chicken Breast\",\n    type: \"protein\",\n    description: \"Chicken breast gently coaxed to doneness so it stays tender and moist\",\n    macros: {\n      \"calories\": 1.65,\n      \"protein\": 0.31,\n      \"fat\": 0.05\n    },\n    price: 0.035\n  },\n]\n\nconst initialState = {\n  ingredients_ordered: [\n    {\n      id: 1,\n      amount: 0\n    },\n    {\n      id: 2,\n      amount: 0\n    },\n    {\n      id: 11,\n      amount: 0\n    },\n  ],\n}\n\nexport const BowlDispatch = React.createContext(null);\nexport const BowlStatus = React.createContext(initialState);\n\nfunction updateState(state, action) {\n  // Reduce function called by useReducer Hook in App\n  switch (action.type) {\n    case 'changeAmount':\n      const newIngredients = state.ingredients_ordered\n      // if id not in ingredients_ordered\n      // otherwise, update \n      const indexToMutate = newIngredients.findIndex((ele) => ele.id === action.id)\n      // note that this will bung up if indexToMutate finds -1\n      // [FIXME] fix this \n      newIngredients[indexToMutate].amount = action.amount\n      return { ingredients_ordered: newIngredients }\n    default:\n      throw new Error();\n  }\n}\n\nfunction App(): React.Node {\n  const [state, dispatch] = React.useReducer(updateState, initialState)\n  return (\n    <div className=\"App\" >\n      <h2>Bowls to the Gram</h2>\n      <p><i>Cool kids call it \"Bees to the Gees\"</i></p>\n      <p> Build your own bowl and get exactly the macros you need</p>\n      <BowlDispatch.Provider value={dispatch} >\n        <IngredientList ingredients={INGREDIENTS} />\n        <BowlStatus.Provider value={state} >\n          <BowlStatsPanel />\n        </BowlStatus.Provider>\n      </BowlDispatch.Provider>\n    </div >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}